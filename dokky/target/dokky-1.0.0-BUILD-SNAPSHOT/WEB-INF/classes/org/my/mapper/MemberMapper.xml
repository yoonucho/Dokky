<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.my.mapper.MemberMapper">

	<resultMap id="authMap" type="org.my.domain.AuthVO" >
	   	<result property="userId" column="userid"/>
	   	<result property="auth" column="auth"/>
 	</resultMap>
	<!--   resultMap은 SELECT의 결과를 처리하게 된다. 
	이게 1+N의 상황으로  
	하나의 회원 정보에 여러 개에 권한을 모아서 처리하는 방식인데.. 
	그러면 그룹을 만드는 기준이 필요한데.. 
	그 기준을 PK에 해당하는 userid 값으로 지정한 것이다. 
	MyBatis문서에는 성능을 향상시키는 효과도 있다고 나온다.
	resultMap 
	id – ID 결과. ID 와 같은 결과는 전반적으로 성능을 향상시킨다-->
  <resultMap id="memberMap" type="org.my.domain.MemberVO" >
    <id property="userId" column="userId"/><!-- PK에 해당하는 userid 값으로 지정 -->
	    <result property="userId" column="userid"/>
	    <result property="userPw" column="userpw"/>
	    <result property="nickName" column="nickname"/>
	    <result property="enabled" column="enabled" />
    <collection property="authList" resultMap="authMap"></collection> 
  </resultMap>
	<!--    회원 정보는 MemberVO 하나이고，AuthVO는 2개가 되어야 하는
	결과인데. memberMap이라는 이름을 가지는〈resultMap〉은〈result〉와
	〈collection〉을 이용해서 바깥쪽 객체(MemberVO의 인스턴스)와 안쪽 객체들(AuthVO
	의 인스턴스들)을 구성. MyBatis에서는 이처럼 하나의 결과에 부가적으로
	여러 개의 데이터를 처리하는 경우 1:N의 결과를 처리할수 있는〈resultMap〉태그를 지
	원. -->
  
  <select id="readMembers" resultMap="memberMap">
		SELECT 
		  mem.userid, userpw, nickname, enabled, auth
		FROM 
		  dk_member mem LEFT OUTER JOIN dk_member_auth auth on mem.userid = auth.userid 
		WHERE mem.userid = #{userId} 
  </select>
  	
  	 <!-- 회원가입 -->
	 <insert id="registerMembers">
	 
		 insert into dk_member(
		 					   member_num,
		 					   userid,
		 					   userpw,
		 					   nickName,
		 					   bankname, 
		 					   account
		 					   ) values(
		 					   			seq_dk_member.nextval,
		 					   			#{userId},
 					   				    #{userPw},
 					   				    #{nickName},
 					   				    #{bankName},
 					   				    #{account}
					   				   )
	 </insert>
	 
	 <insert id="registerMember_auth">
		 insert into dk_member_auth(userid) values(#{userId})
	 </insert>
	 <!-- 회원가입 -->
	 
	 <!-- 재 회원가입 -->
     <update id="reRegisterMembers">
			update dk_member set nickName= #{nickName},
								 bankname= #{bankName},
								 account=#{account},
								 regDate = sysdate,
								 preLoginDate = sysdate,
								 lastLoginDate = sysdate,
								 enabled = 1
						   where userid = #{userId}
	 </update>
	 <!-- 재 회원가입 -->
	 
	 <!-- 아이디 중복 체크 카운트 구하기 -->
	 <select id="IdCheckedCount" resultType="int">
	 	select count(*) from dk_member where userId= #{inputId}
	 </select>
	 
	 <!-- 닉네임 중복 체크 카운트 구하기 -->
	 <select id="nicknameCheckedCount" resultType="int">
	 	select count(*) from dk_member where nickname= #{inputNickname}
	 </select>
	 
	 <!-- 이메일 중복 체크 카운트 구하기 -->
	 <select id="emailCheckedCount" resultType="int">
	 	select count(*) from dk_member where email= #{inputEmail}
	 </select>
	 
	 <!-- 가장 마지막 이전의 로그인 날짜 업데이트 -->
	 <update id="updatePreLoginDate">
	 	update dk_member set preLoginDate = lastLoginDate where userId = #{userId} 
	 </update>
	 
	 <!-- 가장 마지막 로그인날짜 -->
	 <update id="updatelastLoginDate">
	 	update dk_member set lastLoginDate = sysdate where userId = #{userId} 
	 </update>
	 
	 <select id="getRealtimeList" resultType="org.my.domain.BoardVO"> 
		 SELECT /*+INDEX_DESC(DK_BOARD PK_DK_BOARD) */ money,replyCnt, board_num, title, nickName, regdate, hitCnt,userId,likeCnt
		  from dk_board where <![CDATA[ rownum <= 5  ]]>
	</select>
	 
	<select id="getMonthlyList" resultType="org.my.domain.BoardVO"> 
		select 	 
				money,
		 		replyCnt,
			 	board_num, 
			 	title, 
			 	nickName, 
			 	regdate, 
			 	hitCnt,
			 	userId,
			 	likeCnt
			 from (
		SELECT 
			money,
			replyCnt,
		 	board_num, 
		 	title, 
		 	nickName, 
		 	regdate, 
		 	hitCnt,
		 	userId,
		 	likeCnt
		  from dk_board WHERE REGDATE >= SYSDATE-30 order by likeCnt desc,hitcnt desc,replycnt desc )
		  where <![CDATA[ rownum <= 5 ]]>
	</select>
	
	<select id="getDonationList" resultType="org.my.domain.BoardVO"> 
		<![CDATA[
		 	select 	 
		 		 money,
	 			 replyCnt, 
	 			 board_num, 
	 			 title, 
	 			 nickName, 
	 			 regdate, 
	 			 hitCnt,
	 			 userId,
	 			 likeCnt
			 from 
			   ( 
			   SELECT
			   	 money , 
			   	 replyCnt, 
			   	 board_num, 
			   	 title, 
			   	 nickName, 
			   	 regdate, 
			   	 hitCnt,
			   	 userId,
			   	 likeCnt
			FROM 
				  dk_board WHERE REGDATE >= SYSDATE-30 order by money desc )
			
			where rownum <= 5 
			]]>
	</select>
	 
</mapper>
